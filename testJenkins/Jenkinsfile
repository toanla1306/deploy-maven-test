def groovy_file

pipeline {
	agent any
	tools {
		maven "Maven"
	}
	stages {
		stage('Load file groovy') {
			steps {
				script {
					groovy_file = load "script.groovy"
				}
			}
		}

		stage('check quality code') {
			steps {
				script {
					def scannerHome = tool 'sonarqube';
					withSonarQubeEnv('sonarqube') {
                                                sh "${scannerHome}/bin/sonar-scanner \
						-D sonar.login=admin \
						-D sonar.password=123 \
						-D sonar.projectKey=sonarqubetest \
						-D sonar.test=src \
						-D sonar.test.inclusions=**/test/**,**/*.java \
						-D sonar.host.url=http://192.168.10.141:9000/"
					}
				}
			}
		}

		stage('Unit test') {
			steps {
				sh 'mvn test > report.txt'
				step( [ $class: 'JacocoPublisher' ] )
			}
		}

		stage('Deploy to nexus') {
			steps {
				sh 'mvn -X clean deploy'
				sh "curl -L -X GET 'http://nexus-repository.com:8081/service/rest/v1/search/assets/download?sort=version&repository=simpleapp-snapshot&maven.groupId=org.springframework.samples&maven.artifactId=spring-petclinic&maven.extension=jar' -H 'accept: application/json' --output ${env.WORKSPACE}petclinic.jar"
			}
		}

		stage('Build docker image') {
			steps {
				script {
                                        sh "sudo chmod 666 /var/run/docker.sock"
					tag_image_docker = groovy_file.getTagsImageDocker()
					groovy_file.loginDockerwithNexus('JenkinsVM')
                                        echo "${env.WORKSPACE}"
					sh "docker build ${env.WORKSPACE} -t nexus-repository.com:8085/petclinic-image:${tag_image_docker}"
					sh "docker push nexus-repository.com:8085/petclinic-image:${tag_image_docker}"

				}
			}
		}

		stage('Check health release') {
			steps{
				script{
                                        sh "sudo chmod 666 /var/run/docker.sock"
					tag_image_docker = groovy_file.getTagsImageDocker()
					groovy_file.loginDockerwithNexus('JenkinsVM')
					groovy_file.checkHealthDeploy()
				}
			}
		}
	}

	post {
		always {
			script {
				check_status = sh(script: "cat report.txt | grep 'BUILD' | cut -d ' ' -f3", returnStdout: true).trim()
				if("${check_status}" == 'SUCCESS'){
					sh "echo Subject: ${check_status} - simple app - ${env.BUILD_NUMBER} > message.txt"
					sh "echo -e 'BUILD SUCCESS\nlink build - http://192.168.10.141:8080/job/simple-app/${env.BUILD_NUMBER}/console >> message.txt"
				}else{
					sh "echo Subject: ${check_status} - simple app - ${env.BUILD_NUMBER} > message.txt"
					sh "cat report.txt | grep 'ERROR' | sed 's/:/ /g'| sed '\$a link build - http://192.168.10.141:8080/job/simple-app/${env.BUILD_NUMBER}/console' >> message.txt"
				}
				sh 'ls -la'
				sh 'cat message.txt | ssmtp ldtoan1306@gmail.com'
			}
		}
	}
}
